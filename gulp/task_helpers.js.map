{"version":3,"file":"task_helpers.js","sourceRoot":"","sources":["task_helpers.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AACtC,IAAY,cAAc,WAAM,iBAAiB,CAAC,CAAA;AAClD,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,0BAA2B,aAAa,CAAC,CAAA;AAEzC,iCAAiC;AACjC,IAAM,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAIrD,qFAAqF;AACrF,kBAAkB,SAAiB,EAAE,MAAe;IAAf,sBAAe,GAAf,eAAe;IAClD,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,IAAI,CAAC;QACH,IAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;IACH,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;IACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACtC,CAAC;AAGD,gCAAgC;AAChC,uBAA8B,OAAe,EAAE,UAAkB,EAAE,WAAY;IAE7E,MAAM,CAAC;QACL,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;aAC/C,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;aAC3B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC1D,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;AACJ,CAAC;AATe,qBAAa,gBAS5B,CAAA;AAGD,+CAA+C;AAC/C,oBAA2B,UAA0B,EAC1B,cAA+D;IAD/D,0BAA0B,GAA1B,iBAA0B;IAC1B,8BAA+D,GAA/D,qBAA+D;IACxF,MAAM,CAAC;QACL,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,wBAAY,CAAC;aAClC,IAAI,CAAC,UAAU,CAAC;YACf,UAAU,EAAE,UAAU;YACtB,QAAQ,EAAE,YAAY;YACtB,IAAI,EAAE,IAAI;SACX,CAAC,CAAC,CAAC;QAEN,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,cAAc,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAA;AACH,CAAC;AAfe,kBAAU,aAezB,CAAA","sourcesContent":["import * as fs from 'fs';\nimport * as gulp from 'gulp';\nimport * as gulpSass from 'gulp-sass';\nimport * as gulpSourcemaps from 'gulp-sourcemaps';\nimport * as path from 'path';\nimport {PROJECT_ROOT} from './constants';\n\n/** Those imports lack typings */\nconst gulpServer = require('gulp-server-livereload');\n\n\n\n/** If the string passed in is a glob, returns it, otherwise append '**\\/*' to it. */\nfunction _globify(maybeGlob: string, suffix = '**/*') {\n  if (maybeGlob.indexOf('*') != -1) {\n    return maybeGlob;\n  }\n  try {\n    const stat = fs.statSync(maybeGlob);\n    if (stat.isFile()) {\n      return maybeGlob;\n    }\n  } catch (e) {}\n  return path.join(maybeGlob, suffix);\n}\n\n\n/** Create a SASS Build Task. */\nexport function sassBuildTask(destDir: string, srcRootDir: string, sassOptions?) {\n\n  return () => {\n    return gulp.src(_globify(srcRootDir, '**/*.scss'))\n      .pipe(gulpSourcemaps.init())\n      .pipe(gulpSass(sassOptions).on('error', gulpSass.logError))\n      .pipe(gulpSourcemaps.write('.'))\n      .pipe(gulp.dest(destDir));\n  };\n}\n\n\n/** Create a task that serves the index.html */\nexport function serverTask(liveReload: boolean = true,\n                           streamCallback: (stream: NodeJS.ReadWriteStream) => void = null) {\n  return () => {\n    const stream = gulp.src(PROJECT_ROOT)\n      .pipe(gulpServer({\n        livereload: liveReload,\n        fallback: 'index.html',\n        port: 4200\n      }));\n\n    if (streamCallback) {\n      streamCallback(stream);\n    }\n    return stream;\n  }\n}"]}